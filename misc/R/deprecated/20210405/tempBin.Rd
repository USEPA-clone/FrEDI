% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tempBin.R
\name{tempBin}
\alias{tempBin}
\title{Project annual average climate change impacts throughout the 21st century for available sectors.}
\usage{
tempBin(
  inputsList = NULL,
  sectorList = NULL,
  aggLevels = NULL,
  pv = NULL,
  baseYear = NULL,
  rate = NULL,
  silent = NULL
)
}
\arguments{
\item{inputsList}{A list of named elements named elements (`names(inputsList)= c("tempInput", "slrInput", "gdpInput", "popInput")`), each containing dataframes of custom temperature, global mean sea level rise (GMSL), gross domestic product (GDP), and/or population scenarios, respectively, over the period 2010 to 2090.}

\item{sectorList}{A character vector indicating a selection of sectors for which to calculate results. If `NULL`, all sectors are included.}

\item{aggLevels}{Levels of aggregation at which to summarize data: one or more of `c("national", "modelAverage", "impactYear", "impactType", "all")`. Defaults to all levels (i.e., `aggLevels="all"`). Uses the same aggregation levels as `aggregate_impacts()` (see [ciraTempBin::aggregate_impacts()]).}

\item{pv}{A `TRUE/FALSE` value indicating Whether to calculate present values for the annual impacts. Defaults to `pv=TRUE`. Present values (i.e., discounted impacts) are calculated as `discounted_impacts=annual_impacts/(1+rate)^(year-baseYear)`. Set an annual discounting rate and a base year using `baseYear` and `rate`.}

\item{baseYear}{Base year used for calculating present values of annual impacts (i.e., discounting). Defaults to `baseYear=2010`.}

\item{rate}{Annual discount rate used in calculating present values of annual impacts (i.e., discounting). Defaults to `rate=0.03` (i.e., 3% per year).}

\item{silent}{A `TRUE/FALSE` value indicating the level of messaging desired by the user (default=`TRUE`).
#' This function allows users to project annual average climate change impacts throughout the 21st century (2010-2090) for available sectors. Users may specify an optional list of custom scenarios using `"inputsList"`. The output of `tempBin()` is an R data frame object containing annual average impacts, by year, for each sector, adaptation, impact type, model (GCM or SLR scenario), and region.

Users can specify an optional list of custom scenarios with `inputsList` and specify a selection of sectors with `sectorsList`. `tempBin()` uses default scenarios for temperature, population, and GDP when no inputs are specified (i.e., `inputsList` is `NULL`) or for empty elements of the inputs list. If the user does not specify an input scenario for GMSL (i.e., `inputsList=list(slrInput=NULL)` , `tempBin()` first converts the CONUS temperature scenario to global temperatures and then converts the global temperatures to a global mean sea level rise (GMSL) height in centimeters. For more information on the conversion of CONUS temperatures to global temperatures, see `convertTemps()`. For more information on the conversion of global temperatures to GMSL, see `temps2slr()`.

Values for input scenarios must be within reasonable ranges. Temperatures must be in degrees Celsius and values must be greater than or equal to zero and less than or equal to 10 degrees of warming. Values for GLMSL must be in centimeters (cm) and values must be greater than or equal to zero and less than or equal to 150 cm. Population and GDP values must be greater than or equal to zero. If a user inputs a custom scenario with values outside the allowable ranges, `tempBin()` will not run the scenarios and will instead stop and return an error message. For more information, see [ciraTempBin::import_inputs()].

If `inputsList=NULL`,  the temperature- and SLR-binning function `tempBin()` uses defaults for all scenarios. Otherwise, `tempBin()` looks for a list object passed to the argument `inputsList`. Within that list, `tempBin()` looks for list elements `tempInput`, `slrInput`, `gdpInput`, and `popInput` containing dataframes with custom scenarios for temperature, GMSL, GDP, and regional population, respectively. `tempBin()` will default back to the default scenarios for any list elements that are `NULL` or missing. In other words, running `tempBin(inputsList=list())` returns the same outputs as running `tempBin()`. For help importing custom scenarios from CSV files, refer to the pre-processing function [ciraTempBin::import_inputs()].

`tempBin()` linearly interpolates between values for all input scenarios (both custom and default) to the annual level.

Temperatures are interpolated using 1995 as the baseline year (i.e., the central year of the 1986-2005 baseline). GMSL is interpolated using 2000 as the baseline year. In other words, the temperature (in degrees Celsius) is set to zero for the year 1995 and GMSL is set to zero for the year 2000. The interpolated temperature and GMSL scenarios are bound together into a joined scenario of "drivers", with temperature and GMSL values combined into a column called `driverValue`,  and additional columns for year, the driver unit ("degrees Celsius" and "cm" for temperature and GMSL, respectively), and the associated model type ("GCM" or "SLR").

The population scenario is interpolated at the annual level for each region. National totals for population are calculated from the interpolated values. The interpolated population scenario is joined with values for the national total population and the annually interpolated GDP scenario to create a socioeconomic scenario. GDP per capita is calculated by dividing GDP by national population.

Each sector is associated with a model type ("GCM" or "SLR"). With different binned and scaled impacts for each adaptation, impact type, impact year estimate, region, model type, and model. `tempBin()` initializes a results dataframe for all such combinations by joining the socioeconomic scenario with the annual driver values for the associated model type. The annual scaled impacts for each aforementioned combination are calculated by passing the associated driver value to associated scaled impact function and added to the results dataframe.

Each sector, adaptation, impact type, and impact year combination included in the model is also associated with a specified physical scalar, a physical adjustment, a damage adjustment, an economic scalar, and an economic multiplier. `tempBin()` joins the scalar data for each such combination (updated to reflect user inputs) with the results dataframe.  Annual impacts are calculated by multiplying the scaled impacts by the physical scalar (adjusted by the physical adjustment and damage adjustment) and economic scalars (adjusted by the economic multiplier). Physical impacts are calculated by multiplying the scaled impacts by a physical scalar (adjusted by the physical adjustment and damage adjustment) and are shown for selected impact types.

`tempBin()` aggregates/summarizes results to levels of aggregation specified by the user (passed to `aggLevels`) using the post-processing helper function `aggregate_impacts()` (see [ciraTempBin::aggregate_impacts()]. Users can specify a single aggregation level or multiple aggregation levels by passing a single character string or character vector to `aggLevels`. Options for aggregation include calculating national totals (`aggLevels="national"`), averaging across model types and models (`aggLevels="modelAverage"`), summing over all impact types (`aggLevels="impactType"`), and interpolate between impact year estimates (`aggLevels="impactYear"`). Users can specify all aggregation levels at once by specifying `aggLevels="all"` (default) or no aggregation levels (`aggLevels="none"`).

For each of the `aggLevels`, `tempBin()` performs the following summarization (using `aggregate_impacts()`):

| Argument | Description |
| national | Annual values are summed across all regions present in the data. I.e., data is grouped by columns `"sector", "adaptation", "model_type", "model", "year"` (and `"impactType"` and/or `"impactYear"` if they are present in the data) and summed across regions. Years which have missing column data for all regions return as `NA`. The rows of the dataframe of national values (with column `region="National Total"`) are then bound to the regional values. |
| modelAverage | Annual results are averaged across all models present in the data. I.e., data is grouped by columns `"sector", "adaptation", "model_type", "region", "year"` (and `"impactType"` and/or `"impactYear"` if they are present in the data) and averaged across models. Averages exclude missing values. Years which have missing column data for all models return as `NA`. The rows of the dataframe of model averages (with column `model="Average"` are then bound to the rows with individual model results. |
| impactType | Annual results are summed across all impact types by sector present in the data. I.e., data is grouped by columns `"sector", "adaptation", "model_type", "model", "region", "year"` (and `"impactYear"` if present in the data) and summed across impact types. Mutates column `impactType="all"` for all values. Years which have missing column data for all impact types return as `NA`. If results are aggregated across impact types, information about physical impacts (dataframe columns `"physicalmeasure"` and `"physical_impacts"`) are dropped.|
| impactYear | Annual results for sectors with only one impact year estimate (i.e., `impactYear == "N/A"`) are separated from those with multiple impact year estimates. For sectors with multiple impact years (i.e. 2010 and 2090 socioeconomic runs), annual results are interpolated between impact year estimates for applicable sectors  i.e., data is grouped by columns `"sector", "adaptation", "model_type", "model", "region", "year"` (and `"impactType"` if present in the data) and interpolated across years with the 2010 run assigned to year 2010 and the 2090 run assigned to year 2090. The interpolated values are bound back to the results for sectors with a single impact year estimate, and column `impactYear` set to `impactYear="interpolate"` for all values. |


Users can choose to calculate present values of annual impacts (i.e., discounted impacts), by setting `pv=TRUE`. Discounted impacts are calculated using a base year and annual discount rate as `discounted_impacts=annual_impacts/(1+rate)^(year-baseYear)`. Set base year and annual discount rate using `baseYear` (defaults to `baseYear=2010`) and `rate` (defaults to 3% i.e., `rate=0.03`), respectively.}
}
\value{
The output of `tempBin()` is an R data frame object containing annual average impacts, by year (2010-2090), for each sector, adaptation, model (GCM or SLR scenario), and region.
}
\description{
This function allows users to project annual average climate change impacts throughout the 21st century (2010-2090) for available sectors. Users may specify an optional list of custom scenarios. The output is an R data frame object containing annual average impacts, by year, for each sector, adaptation, impact type, model (GCM or SLR scenario), and region.
}
\examples{
### Run function with defaults (same as `defaultResults` dataset)
df_defaults <- tempBin()

### Example with custom temperature inputs
### Import custom temperature scenario included with ciraTempBin package
list_tempEx <- system.file(package="ciraTempBin") \%>\%
paste("extdata/scenarios" , sep="/") \%>\%
paste("temp_scenario1.csv", sep="/") \%>\%
import_inputs(tempfile = tempInputFile)
### Run custom temperature scenario and output impacts without aggregation and with present values (default base year and discount rate)
df_tempExOut <- tempBin(inputsList= list_tempEx, aggLevels="none", pv=TRUE, silent=TRUE)



}
